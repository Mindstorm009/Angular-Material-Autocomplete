{"version":3,"file":"vguleaev-dynamic-autocomplete.js.map","sources":["ng://@vguleaev/dynamic-autocomplete/src/app/autocomplete/abstract-value-accessor.ts","ng://@vguleaev/dynamic-autocomplete/src/app/autocomplete/autocomplete.component.ts","ng://@vguleaev/dynamic-autocomplete/src/app/autocomplete/autocomplete.module.ts"],"sourcesContent":["import { forwardRef, Input } from \"@angular/core\";\r\nimport {\r\n  ControlValueAccessor,\r\n  NG_VALUE_ACCESSOR,\r\n  NG_VALIDATORS,\r\n  FormControl,\r\n  Validator,\r\n  AbstractControl,\r\n  ValidationErrors,\r\n} from \"@angular/forms\";\r\n\r\nexport abstract class AbstractValueAccessor implements ControlValueAccessor, Validator {\r\n\r\n  @Input() disabled?: boolean = false;\r\n  @Input() required?: boolean;\r\n  @Input() placeholder?: string;\r\n  @Input() formControlItem?: FormControl;\r\n  @Input() formControlName?: string;\r\n\r\n  private _value: any = \"\";\r\n\r\n  get value(): any {\r\n    return this._value;\r\n  }\r\n  set value(v: any) {\r\n    if (v !== this._value) {\r\n      this._value = v;\r\n      this.onChange(v);\r\n    }\r\n  }\r\n\r\n  public writeValue(value: any) {\r\n    this._value = value;\r\n    // warning: comment below if only want to emit on user intervention\r\n    this.onChange(value);\r\n  }\r\n\r\n  public onChange = (_: any) => {};\r\n  public onTouched = () => {};\r\n  public registerOnChange(fn: (_: any) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n  public registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  public validate(c: AbstractControl): { [key: string]: any } | null {\r\n    return null;\r\n  }\r\n  public registerOnValidatorChange?(fn: () => void): void;\r\n}\r\n","import { AfterViewInit, Component, OnInit, Input, ViewChild, ElementRef, EventEmitter, Output, TemplateRef, forwardRef } from \"@angular/core\";\r\nimport { AbstractValueAccessor } from \"./abstract-value-accessor\";\r\nimport { MatAutocomplete, MatButton } from \"@angular/material\";\r\nimport { AutocompleteService } from \"./autocomplete.service\";\r\nimport { HttpParams } from \"@angular/common/http\";\r\nimport { NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: \"autocomplete\",\r\n  template: `<mat-form-field class=\"input-container\">\r\n  <input matInput\r\n         *ngIf=\"formControlItem && formControlName\"\r\n         [formControl]=\"formControlItem\"\r\n         [required]=\"required\"\r\n         [matAutocomplete]=\"autocomplete\"\r\n         [placeholder]=\"placeholder\"\r\n         (keyup)=\"onKey($event)\"\r\n         (focus)=\"onFocus($event)\"\r\n         (blur)=\"onBlur($event)\"\r\n         #autocompleteInput\r\n  />\r\n  <input matInput\r\n         *ngIf=\"!formControlItem && !formControlName\"\r\n         [name]=\"name\"\r\n         [disabled]=\"disabled\"\r\n         [required]=\"required\"\r\n         [matAutocomplete]=\"autocomplete\"\r\n         [placeholder]=\"placeholder\"\r\n         (keyup)=\"onKey($event)\"\r\n         (focus)=\"onFocus($event)\"\r\n         (blur)=\"onBlur($event)\"\r\n         [(ngModel)]=\"model\"\r\n         #autocompleteInput\r\n  />\r\n  <button *ngIf=\"hasSearchButton\" #searchButton mat-button matPrefix mat-icon-button aria-label=\"Search\" (click)=\"fetch(true)\" type=\"button\">\r\n      <mat-icon class=\"search-icon\">search</mat-icon>\r\n  </button>\r\n  <button *ngIf=\"model || value || query\" mat-button matSuffix mat-icon-button aria-label=\"Clear\" (click)=\"clearValue()\" #clearButton type=\"button\">\r\n    <mat-icon class=\"clear-icon\">clear</mat-icon>\r\n  </button>\r\n  <mat-progress-bar mode=\"indeterminate\" *ngIf=\"hasProgressBar && requestsInQueue > 0\"></mat-progress-bar>\r\n  <mat-autocomplete #autocomplete=\"matAutocomplete\"\r\n                    [displayWith]=\"autocompleteDisplayFn()\"\r\n                    (optionSelected)=\"autocompleteSelected($event)\">\r\n    <mat-option *ngFor=\"let item of autocompleteList\" [value]=\"item\">\r\n      <ng-template [ngIf]=\"displayTemplate\">\r\n        <ng-container *ngTemplateOutlet=\"displayTemplate; context: {$implicit: item}\"></ng-container>\r\n      </ng-template>\r\n      <span *ngIf=\"!displayTemplate\">\r\n        {{viewItem(item)}}\r\n      </span>\r\n    </mat-option>\r\n    <mat-option *ngIf=\"query && noSuggestions\" disabled>\r\n      <span>Sorry, no suggestions were found</span>\r\n    </mat-option>\r\n    <mat-option *ngIf=\"query && noSuggestions && canCreateNew\" [value]=\"query\" (click)=\"onCreateNew()\">\r\n      <mat-icon class=\"add-icon\">add</mat-icon> <span class=\"create-new\"> {{addNewText}} </span>\r\n    </mat-option>\r\n  </mat-autocomplete>\r\n  <mat-error>\r\n    {{ validationErrors && validationErrors.length > 0 ? validationErrors[0] : ''}}\r\n  </mat-error>\r\n</mat-form-field>\r\n\r\n`,\r\n  styles: [`.input-container{width:100%}.search-icon{font-size:24px}.mat-progress-bar{position:absolute}.create-new{color:#27ae60}.add-icon{position:relative;color:#27ae60}`],\r\n  providers: [{\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => AutocompleteComponent),\r\n    multi: true,\r\n  }],\r\n})\r\nexport class AutocompleteComponent extends AbstractValueAccessor implements AfterViewInit, OnInit {\r\n  /**\r\n   *  How to use this component:\r\n   *\r\n   *  <autocomplete\r\n   *    placeholder=\"Search\"\r\n   *    [minChars] = \"2\"                            // start fetch items after min chars amount, default is 2\r\n   *    [source]=\"AutocompleteService | any[]\"      // source can be service or array, when array is passed filter is done local\r\n   *    [serviceParams]= \"HttpParams\"               // sets HttpParams for service fetch function\r\n   *    [doPrefetch]= \"false\"                       // when active, service do fetch items on init\r\n   *    [clearAfterSearch] =Â \"false\"                // clears input after item select\r\n   *    [hasProgressBar] =Â \"false\"                  // adds loading while making request\r\n   *    [hasSearchButton] = \"false\"                 // adds search button near input\r\n   *\r\n   *    displayItem = \"item.name\"                   // text will be evaluated and executed, better use displayItemFn for function\r\n   *    [displayTemplate] = \"TemplateRef\"           // template reference for autocomplete options, displayItem is needed for local search\r\n   *\r\n   *    [canCreateNew] =Â \"false\"                    // adds create button when no suggestions\r\n   *    [addNewText] = \"'Add new'\"                  // text to display near create button\r\n   *    (createNew) = \"onCreateNew($event)\"         // rises an event when click on create button\r\n   *\r\n   *    [filterCallback] = \"function\"               // callback function to format data from server response\r\n   *    [focusOn]=\"true\"                            // sets focus that triggers fetch\r\n   *\r\n   *    (optionSelected)=\"onSelectCallback($event)\" // get selected item from event\r\n   *\r\n   *    formControlName=\"controlName\"               // access it as any form control\r\n   *    [formControlItem]=\"form.controls['controlName']\"\r\n   *    [(ngModel)]=\"model.item\"\r\n   *\r\n   *    [(model)]=\"model.item\"                      // or just use model binding\r\n   *    (modelChange)=\"itemSelected($event)\"\r\n   *\r\n   *  ></autocomplete>\r\n   */\r\n\r\n  @Input() set source(value: AutocompleteService<any> | any[]) {\r\n    if (this.isAutocompleteService(value)) {\r\n      this.service = value as AutocompleteService<any>;\r\n    } else\r\n    if (value instanceof Array) {\r\n      this.storedItems = value.slice(0);\r\n      this.saveReturnType(this.storedItems);\r\n    }\r\n  }\r\n\r\n  // @Input() placeholder = \"\";\r\n  @Input() name = \"\";\r\n  @Input() doPrefetch = false;\r\n  @Input() displayItem: string;\r\n  @Input() hasSearchButton = false;\r\n  @Input() hasProgressBar = false;\r\n  @Input() minChars = 2;\r\n  @Input() clearAfterSearch = false;\r\n  @Input() canCreateNew = false;\r\n  @Input() addNewText = \"Add new\";\r\n  @Input() focusOn = false;\r\n  @Input() validationErrors: string[] = [];\r\n  @Input() serviceParams?: HttpParams;\r\n  @Input() displayItemFn?: (item: any) => string;\r\n  @Input() displayTemplate?: TemplateRef<any>;\r\n  @Input() filterCallback: any = (x: any[]) => x;\r\n\r\n  @Output() modelChange: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() optionSelected = new EventEmitter();\r\n  @Output() createNew = new EventEmitter();\r\n\r\n  @ViewChild(\"autocompleteInput\") autocompleteInput: ElementRef;\r\n  @ViewChild(\"searchButton\") searchButton: MatButton;\r\n  @ViewChild(\"clearButton\") clearButton: MatButton;\r\n  @ViewChild(\"autocomplete\") autocomplete: MatAutocomplete;\r\n\r\n  public currentModel: any;\r\n  public query = \"\";\r\n  public autocompleteList: any[] | null;\r\n  public request = false;\r\n  public noSuggestions: boolean;\r\n  public requestsInQueue = 0;\r\n\r\n  private storedItems?: any[];\r\n  private service?: AutocompleteService<any>;\r\n  private returnType: string;\r\n\r\n  @Input() set model(value: any) {\r\n    if (value !== this.currentModel) {\r\n      this.currentModel = value;\r\n      if (value === null || this.returnType === typeof value) {\r\n        this.modelChange.emit(value);\r\n      }\r\n    }\r\n  }\r\n  get model(): any {\r\n    return this.currentModel;\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n    this.placeholder = this.placeholder ? this.placeholder : \"Search\";\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.doPrefetch) {\r\n      this.prefetch();\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (this.focusOn) {\r\n      setTimeout(() => {\r\n        this.autocompleteInput.nativeElement.focus();\r\n      });\r\n    }\r\n  }\r\n\r\n  public prefetch() {\r\n    if (!this.service) {\r\n      throw new Error(\"Service for prefetch is not defined in 'Source'\");\r\n    }\r\n\r\n    this.storedItems = [];\r\n    this.noSuggestions = false;\r\n\r\n    let params = new HttpParams();\r\n    if (this.serviceParams) {\r\n      params = this.serviceParams;\r\n    }\r\n\r\n    this.service.fetch(params).then((result: any) => {\r\n      this.storedItems = this.filterCallback(result);\r\n      this.noSuggestions = result.length === 0;\r\n      this.saveReturnType(this.storedItems);\r\n    });\r\n  }\r\n\r\n  public fetch(force?: boolean) {\r\n    if (!this.service) {\r\n      throw new Error(\"Service for fetch is not defined in 'Source'\");\r\n    }\r\n\r\n    this.query = this.autocompleteInput.nativeElement.value;\r\n\r\n    // empty query is not allowed for autocomplete\r\n    if (this.isQueryEmpty(this.query)) {\r\n      this.autocompleteList = [];\r\n      return;\r\n    }\r\n\r\n    if (force || this.query.length >= this.minChars) {\r\n      let params = new HttpParams();\r\n      params = params.set(\"query\", this.query);\r\n      if (this.serviceParams) {\r\n        params = this.serviceParams.set(\"query\", this.query);\r\n      }\r\n\r\n      this.noSuggestions = false;\r\n      this.requestsInQueue = this.requestsInQueue + 1;\r\n\r\n      this.service.fetch(params)\r\n        .then((result: any) => {\r\n          this.requestsInQueue = this.requestsInQueue - 1;\r\n          this.autocompleteList = this.filterCallback(result);\r\n          this.noSuggestions = result.length === 0;\r\n          this.saveReturnType(this.autocompleteList);\r\n        });\r\n    }\r\n  }\r\n\r\n  public filterStoredItems() {\r\n    if (!this.displayItem && !this.displayItemFn) {\r\n      throw new Error(\"You must provide displayItem or displayItemFn for local search.\");\r\n    }\r\n\r\n    this.query = this.autocompleteInput.nativeElement.value;\r\n    if (this.query.length < this.minChars) {\r\n      return;\r\n    }\r\n\r\n    if (this.storedItems) {\r\n\r\n      this.autocompleteList = this.storedItems.filter(item => {\r\n        if (!this.viewItem(item)) {\r\n          throw new Error(\"String to evaluate in displayItem was provided wrong. Better use displayItemFn\");\r\n        }\r\n\r\n        let formatedItem = this.viewItem(item).toLowerCase();\r\n        if (this.displayItemFn) {\r\n          formatedItem = this.displayItemFn(item).toLowerCase();\r\n        }\r\n        return formatedItem.indexOf(this.query.toLowerCase()) > -1;\r\n      });\r\n      this.noSuggestions = this.query.length > 0 && this.autocompleteList.length === 0;\r\n\r\n    } else {\r\n      this.autocompleteList = [];\r\n      this.noSuggestions = false;\r\n    }\r\n  }\r\n\r\n  public autocompleteSelected($event: any) {\r\n    this.query = this.autocompleteInput.nativeElement.value;\r\n    const selected = $event.option.value;\r\n\r\n    this.value = selected;\r\n    this.model = selected;\r\n\r\n    if (selected) {\r\n      this.optionSelected.emit(selected);\r\n    }\r\n\r\n    if (this.clearAfterSearch) {\r\n      this.clearValue();\r\n    }\r\n  }\r\n\r\n  public autocompleteDisplayFn() {\r\n    if (this.displayItemFn) {\r\n      return this.displayItemFn;\r\n    }\r\n\r\n    return (item: any) => {\r\n      return item ? this.viewItem(item) : item;\r\n    };\r\n  }\r\n\r\n  public onKey($event: KeyboardEvent) {\r\n    // prevent filtering results if arrow were pressed\r\n    if ($event.keyCode < 37 || $event.keyCode > 40) {\r\n      if (this.autocompleteInput.nativeElement.value === \"\") {\r\n        this.clearValue();\r\n      }\r\n      this.onKeyCallback();\r\n    }\r\n  }\r\n\r\n  public onKeyCallback() {\r\n    if (this.doSearchViaService) {\r\n      this.fetch();\r\n    } else {\r\n      this.filterStoredItems();\r\n    }\r\n  }\r\n\r\n  public onBlur($event: MouseEvent) {\r\n    if (this.searchButton && this.autocompleteInput.nativeElement.value === \"\"\r\n      && $event.relatedTarget !== this.searchButton[\"_elementRef\"].nativeElement) {\r\n      this.autocompleteInput.nativeElement.value = this.model ? this.viewItem(this.model) : \"\";\r\n    }\r\n  }\r\n\r\n  public onFocus($event: any) {\r\n    if (this.doSearchViaService) {\r\n      this.fetch();\r\n    } else {\r\n      this.filterStoredItems();\r\n    }\r\n  }\r\n\r\n  public viewItem(item: any) {\r\n    if (this.displayItemFn) {\r\n      return this.displayItemFn(item);\r\n    }\r\n    // using eval() can be dangerous, better use displayItemFn function\r\n    return this.displayItem ? eval(this.displayItem) : item.name;\r\n  }\r\n\r\n  public clearValue() {\r\n    if (this.formControlItem) {\r\n      this.formControlItem.reset();\r\n    }\r\n    this.model = null;\r\n    this.value = \"\";\r\n  }\r\n\r\n  get doSearchViaService() {\r\n    // check if search result returns from service or from local data\r\n    // if prefetch is active only one request will be made on init\r\n    return this.service && !this.doPrefetch;\r\n  }\r\n\r\n  public onCreateNew() {\r\n    if (this.model) {\r\n      const value = this.returnType === typeof this.model ? this.viewItem(this.model) : this.model;\r\n      this.autocompleteInput.nativeElement.value = value;\r\n    }\r\n\r\n    this.createNew.emit(this.model);\r\n  }\r\n\r\n  private isQueryEmpty(query: string): boolean {\r\n    return query.length <= 0;\r\n  }\r\n\r\n  private isAutocompleteService(object: any): object is AutocompleteService<any> {\r\n    return object && \"fetch\" in object;\r\n  }\r\n\r\n  private saveReturnType(items: any[] | undefined | null) {\r\n    if (items && items.length > 0) {\r\n      this.returnType = typeof items[0];\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatProgressBarModule, MatButtonModule, MatIconModule, MatInputModule, MatAutocompleteModule, MatSelectModule, MatCardModule } from '@angular/material';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { AutocompleteComponent } from './autocomplete.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    BrowserAnimationsModule,\r\n    ReactiveFormsModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatSelectModule,\r\n    MatCardModule,\r\n    MatAutocompleteModule,\r\n    MatIconModule,\r\n    MatProgressBarModule\r\n  ],\r\n  declarations: [AutocompleteComponent],\r\n  exports: [AutocompleteComponent]\r\n})\r\nexport class DynamicAutocompleteModule { }\r\n"],"names":[],"mappings":"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"}
